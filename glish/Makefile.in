##
## $Header$
##
## Makefile for Glish interpreter.
##

# Note: Glish requires flex version 2.4.6 or greater.  Flex is available
# from ftp.ee.lbl.gov.

CC = @CC@
CPLUS = @CXX@
LFLAGS = -s
YACC = @YACC@
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

MKHIER = @top_srcdir@/config/mkhier

SHELL = /bin/sh
SH = $(SHELL)

SRC = ..

H = $(SRC)/include/Glish

XLIB = @XLIBSW@
XINC = @XINCLUDES@

INCLUDE = -I. -I$(SRC) -I$(SRC)/include -I../../include @TK_INCL@ $(XINC) $(PLUSINC)
CINCLUDE = -I. -I$(SRC) -I$(SRC)/include -I../../include @TK_INCL@ $(XINC)
CFLAGS = @GLISH_FLAGS@ @CFLAGS@
CXXFLAGS = @GLISH_FLAGS@ @CXXFLAGS@

INTERP_OBJS = \
	IValue.o \
	Agent.o \
	BinOpExpr.o \
	BuiltIn.o \
	Event.o \
	Expr.o \
	Frame.o \
	Func.o \
	Sequencer.o \
	Select.o \
	Stmt.o \
	Task.o \
	TkAgent.o \
	TkCanvas.o \
	TkSelect.o \
	glish_init.o \
	parse.o \
	scan.o

CLIENT_OBJS = \
	Value.o \
	ValKern.o \
	Client.o \
	Complex.o \
	Daemon.o \
	Dict.o \
	Executable.o \
	List.o \
	LocalExec.o \
	Object.o \
	Queue.o \
	RemoteExec.o \
	Reporter.o \
	Socket.o \
	VecRef.o \
	glishlib.o \
	system.o

KEY_HEADERS = \
	$(SRC)/Expr.h $(SRC)/Func.h $(H)/GlishType.h \
	$(H)/Object.h $(SRC)/Sequencer.h $(H)/Value.h $(SRC)/IValue.h \
	$(H)/glish.h

ROOT = @top_srcdir@
INCDIR = $(ROOT)/include
LIBDIR = $(ROOT)/lib/$(ARCH)
BINDIR = $(ROOT)/bin/$(ARCH)

##
## prefix may be used as part of '@exec_prefix@'
##
prefix = @prefix@
PFX_ROOT = @exec_prefix@
PFX_INCDIR = @prefix@/include
PFX_LIBDIR = $(PFX_ROOT)/lib
PFX_BINDIR = $(PFX_ROOT)/bin


GLISHROOT = @GLISHROOT@
TK_LIB = @TK_LIB@ 

LIBS = $(LIBDIR)/libsds.a $(LIBDIR)/libedit.a @NPD_LIB@ $(TK_LIB)

TAR_FILE = glish.tar

all: libglish.a libinterp.a glish 

glish: main.o libinterp.a libglish.a $(LIBS)
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -o glish main.o libinterp.a libglish.a \
		 $(LIBS) $(XLIB) @LIBS@

libglish.a: $(CLIENT_OBJS)
	rm -f libglish.a
	ar r libglish.a $(CLIENT_OBJS)
	$(RANLIB) libglish.a

libinterp.a: $(INTERP_OBJS)
	rm -f libinterp.a
	ar r libinterp.a $(INTERP_OBJS)
	$(RANLIB) libinterp.a

$(BINDIR)/glish: glish
	$(MKHIER) $(BINDIR)
	$(INSTALL_PROGRAM) -s glish $(BINDIR)

$(LIBDIR)/libglish.a: libglish.a
	$(MKHIER) $(LIBDIR)
	$(INSTALL_DATA) libglish.a $(LIBDIR)
	$(RANLIB) $(LIBDIR)/libglish.a

install: $(LIBDIR)/libglish.a $(BINDIR)/glish
	$(MKHIER) $(INCDIR)/Glish
	@rm -f $(INCDIR)/Glish/*.h
	cp $(H)/*.h $(INCDIR)/Glish

$(PFX_BINDIR)/glish: glish
	$(MKHIER) $(PFX_BINDIR)
	$(INSTALL_PROGRAM) -s glish $(PFX_BINDIR)

$(PFX_LIBDIR)/libglish.a: libglish.a
	$(MKHIER) $(PFX_LIBDIR)
	$(INSTALL_DATA) libglish.a $(PFX_LIBDIR)
	$(RANLIB) $(PFX_LIBDIR)/libglish.a

prefix-install: $(PFX_LIBDIR)/libglish.a $(PFX_BINDIR)/glish
	$(MKHIER) $(PFX_INCDIR)/Glish
	@rm -f $(PFX_INCDIR)/Glish/*.h
	cp $(H)/*.h $(PFX_INCDIR)/Glish

tar:
	@rm -f $(TAR_FILE).Z tar-files
	@$(MAKE) $(MFLAGS) tar-list >tar-files
	tar cf $(TAR_FILE) -I tar-files
	compress $(TAR_FILE)
	@rm tar-files

tar-list:
	@echo glish >&2
	@ls Makefile.in config.h.in \
		COPYING glish.init mkinit.sh *.c *.cc *.h *.l *.y \
		*.sed doc/*.ps demos/*.g demos/*.cc demos/*.c \
		demos/README* include/Glish/*.h | grep -v '^config.h$$'
	@cd clients; $(MAKE) $(MFLAGS) tar-list | sed 's,^,clients/,'

rcsinfo:
	@echo glish
	@rlog -L -S RCS/*,v
	@echo glish/include/Glish
	@cd include/Glish; rlog -L -S RCS/*,v
	@cd clients; $(MAKE) $(MFLAGS) rcsinfo

clean:
	@rm -f $(CLIENT_OBJS) $(INTERP_OBJS) libinterp.a libglish.a main.o glish errs \
			parse.cc y.tab.h glish_init.cc scan.cc ../$(TAR_FILE).Z

distclean: clean
	rm -f config.status config.cache config.h config_p.h Makefile

Agent.o: $(SRC)/Agent.cc $(KEY_HEADERS) $(SRC)/Stmt.h $(SRC)/Reporter.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Agent.cc
BinOpExpr.o: $(SRC)/BinOpExpr.cc $(SRC)/BinOpExpr.h $(KEY_HEADERS)
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/BinOpExpr.cc
BuiltIn.o: $(SRC)/BuiltIn.cc $(SRC)/BuiltIn.h $(SRC)/TkAgent.h $(KEY_HEADERS)
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/BuiltIn.cc
Client.o: $(SRC)/Client.cc $(H)/Client.h $(H)/Value.h $(H)/Object.h \
		$(SRC)/Reporter.h $(SRC)/ports.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Client.cc
Complex.o: $(SRC)/Complex.cc $(H)/Complex.h $(H)/glish.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Complex.cc
Daemon.o: $(SRC)/Daemon.cc $(SRC)/Daemon.h $(H)/Client.h
	$(CPLUS) '-DRSH="@RSH@"' $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Daemon.cc
Dict.o: $(SRC)/Dict.cc $(H)/Dict.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Dict.cc
Event.o: $(SRC)/Event.cc $(KEY_HEADERS) $(SRC)/Event.h $(SRC)/Reporter.h \
		$(SRC)/Task.h $(SRC)/Agent.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Event.cc
Executable.o: $(SRC)/Executable.cc $(SRC)/Executable.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Executable.cc
Expr.o: $(SRC)/Expr.cc $(KEY_HEADERS) $(SRC)/Reporter.h $(SRC)/Task.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Expr.cc
Frame.o: $(SRC)/Frame.cc $(SRC)/Frame.h $(H)/Object.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Frame.cc
Func.o: $(SRC)/Func.cc $(SRC)/Func.h $(SRC)/Stmt.h $(KEY_HEADERS)
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Func.cc
List.o: $(SRC)/List.cc $(H)/List.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/List.cc
LocalExec.o: $(SRC)/LocalExec.cc $(SRC)/LocalExec.h $(SRC)/Executable.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/LocalExec.cc
Object.o: $(SRC)/Object.cc $(H)/Object.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Object.cc
Queue.o: $(SRC)/Queue.cc $(SRC)/Queue.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Queue.cc
RemoteExec.o: $(SRC)/RemoteExec.cc $(SRC)/RemoteExec.h $(SRC)/Executable.h \
		$(SRC)/Channel.h $(H)/Client.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/RemoteExec.cc
Reporter.o: $(SRC)/Reporter.cc $(SRC)/Reporter.h $(H)/Object.h $(SRC)/input.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Reporter.cc
Select.o: $(SRC)/Select.cc $(SRC)/Select.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Select.cc
Sequencer.o: $(SRC)/Sequencer.cc $(SRC)/Sequencer.h $(KEY_HEADERS) \
    $(SRC)/Task.h $(SRC)/Stmt.h $(SRC)/Channel.h $(SRC)/Queue.h \
    $(SRC)/Frame.h $(SRC)/ports.h $(SRC)/version.h $(H)/Client.h
	$(CPLUS) $(CXXFLAGS) -DGLISHROOT=\"$(GLISHROOT)\" $(INCLUDE) \
				-c $(SRC)/Sequencer.cc
Socket.o: $(SRC)/Socket.cc $(SRC)/Socket.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Socket.cc
Stmt.o: $(SRC)/Stmt.cc $(SRC)/Stmt.h $(KEY_HEADERS)
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Stmt.cc
Task.o:	$(SRC)/Task.cc $(SRC)/Task.h $(KEY_HEADERS) $(SRC)/Channel.h \
    $(SRC)/BuiltIn.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Task.cc
TkAgent.o: $(SRC)/Agent.h $(SRC)/TkAgent.cc $(SRC)/TkAgent.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -w -c $(SRC)/TkAgent.cc
TkCanvas.o: $(SRC)/Agent.h $(SRC)/TkAgent.h $(SRC)/TkCanvas.cc $(SRC)/TkCanvas.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/TkCanvas.cc
TkSelect.o: $(SRC)/Select.h $(SRC)/TkSelect.cc $(SRC)/TkSelect.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/TkSelect.cc
ValKern.o: $(SRC)/ValKern.cc $(H)/ValKern.h $(H)/glish.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/ValKern.cc
Value.o: $(SRC)/Value.cc $(H)/Value.h $(H)/Object.h $(H)/glish.h $(H)/ValKern.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/Value.cc
IValue.o: $(SRC)/Value.cc $(H)/Value.h $(SRC)/IValue.cc $(SRC)/IValue.h \
				 $(SRC)/Expr.h $(SRC)/BinOpExpr.h \
			 $(H)/Object.h $(H)/glish.h $(H)/ValKern.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/IValue.cc
VecRef.o: $(SRC)/VecRef.cc $(H)/VecRef.h $(KEY_HEADERS)
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/VecRef.cc
glishlib.o: $(SRC)/glishlib.cc $(SRC)/glishlib.h $(H)/Value.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/glishlib.cc
main.o: $(SRC)/main.cc $(SRC)/Sequencer.h $(SRC)/input.h $(SRC)/IValue.h
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c $(SRC)/main.cc

y.tab.h parse.o: $(SRC)/parse.y

parse.cc: $(SRC)/parse.y
	$(YACC) -d $(SRC)/parse.y
	mv -f y.tab.c parse.cc
	sed -e 's/extern "C" int yylex(void);//' < parse.cc > parse.cc.fixed
	mv parse.cc.fixed parse.cc
# the sgi compiler puts in a declaration of yylex which screws things up
# Hence this kludge. gcc for one doesn't redeclare yylex so this does
# nothing.

parse.o: parse.cc $(KEY_HEADERS) $(SRC)/Stmt.h $(SRC)/BinOpExpr.h
	@sed -f $(SRC)/fix_yyparse.sed < parse.cc > parse.cc.fixed
	@mv parse.cc.fixed parse.cc
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -I. -DYYDEBUG -c parse.cc

scan.o: $(SRC)/scan.l y.tab.h $(KEY_HEADERS)
	@rm -f scan.cc
	flex $(LFLAGS) $(SRC)/scan.l
	@mv lex.yy.c scan.cc
	@-chmod g+w scan.cc
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -I. -c scan.cc

glish_init.cc: $(SRC)/glish.init $(SRC)/mkinit.sh
	$(SH) $(SRC)/mkinit.sh $(SRC)/glish.init >glish_init.cc
glish_init.o: glish_init.cc
	$(CPLUS) $(CXXFLAGS) $(INCLUDE) -c glish_init.cc

system.o: $(SRC)/system.c $(SRC)/system.h
	$(CC) $(CFLAGS) $(CINCLUDE) -c $(SRC)/system.c

