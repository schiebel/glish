## $Id$
## Copyright (c) 1993 The Regents of the University of California.
## Copyright (c) 1997 Associated Universities Inc.
##
## Makefile for Glish interpreter.
##

## Note: Glish requires flex version 2.4.6 or greater.  Flex is available
## from ftp.ee.lbl.gov.

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
GC_FLAG = -DGGC

#IF DYNAMIC
MK_LIB = @MAKE_SLIB@
LD_LIBS = @SLIB_LD_LIBS@
CFLAGS = @GLISH_FLAGS@ @CFLAGS@ @SLIB_CFLAGS@ $(GC_FLAG)
CXXFLAGS = @GLISH_FLAGS@ @CXXFLAGS@ @SLIB_CXXFLAGS@ $(GC_FLAG)
LIB_SUFFIX = @GLISH_SLIB_SUFFIX@
RANLIB = :
LIBTGT = @DYNAMIC_LIB@
BINTGT = @DYNAMIC_BIN@
INSTALL_LIBTGT = INSTALL_@DYNAMIC_LIB@
INSTALL_BINTGT = INSTALL_@DYNAMIC_BIN@
GLISH_LIBS = @GLISH_LIBS@
INSTALL_LIBRARY = $(INSTALL_PROGRAM)
#ELSE
MK_LIB = @MAKE_LIB@
LD_LIBS = 
CFLAGS = @GLISH_FLAGS@ @CFLAGS@ $(GC_FLAG)
CXXFLAGS = @GLISH_FLAGS@ @CXXFLAGS@ $(GC_FLAG)
LIB_SUFFIX = @GLISH_LIB_SUFFIX@
RANLIB = @RANLIB@
LIBTGT = @STATIC_LIB@
BINTGT = @STATIC_BIN@
INSTALL_LIBTGT = INSTALL_@STATIC_LIB@
INSTALL_BINTGT = INSTALL_@STATIC_BIN@
GLISH_LIBS = @GLISH_LIBS@
INSTALL_LIBRARY = $(INSTALL_DATA)
#FI

CC = @CC@
ALTCC = @ALTCC@
CPLUS = @CXX@
LFLAGS = -s
YACC = @YACC@
LIBS = @LIBS@

D = @DOT@
T = @TOUCH_PROXY@
MINSPACE_RM = @MINSPACE_RM@

SHELL = /bin/sh
SH = $(SHELL)

SRC = ../..

H = $(SRC)/include/Glish


INTERP_OBJS = \
	IValue.o \
	Agent.o \
	BinOpExpr.o \
	BuiltIn.o \
	Daemon.o \
	Event.o \
	Expr.o \
	Frame.o \
	Func.o \
	Garbage.o \
	Pager.o \
	RemoteExec.o \
	Sequencer.o \
	Select.o \
	Stmt.o \
	Task.o \
	TkAgent.o \
	TkCanvas.o \
	TkSelect.o \
	glish_init.o \
	parse.o \
	scan.o

CLIENT_OBJS = \
	Value.o \
	ValKern.o \
	Client.o \
	Complex.o \
	Dict.o \
	Executable.o \
	LocalExec.o \
	Object.o \
	Queue.o \
	Reporter.o \
	Socket.o \
	Str.o \
	Stream.o \
	VecRef.o \
	glishlib.o \
	system.o @ARCH_OBJ@

INTERP_OBJS_PROXY = \
	$(D)IValue.o \
	$(D)Agent.o \
	$(D)BinOpExpr.o \
	$(D)BuiltIn.o \
	$(D)Daemon.o \
	$(D)Event.o \
	$(D)Expr.o \
	$(D)Frame.o \
	$(D)Func.o \
	$(D)Garbage.o \
	$(D)Pager.o \
	$(D)RemoteExec.o \
	$(D)Sequencer.o \
	$(D)Select.o \
	$(D)Stmt.o \
	$(D)Task.o \
	$(D)TkAgent.o \
	$(D)TkCanvas.o \
	$(D)TkSelect.o \
	$(D)glish_init.o \
	$(D)parse.o \
	$(D)scan.o

CLIENT_OBJS_PROXY = \
	$(D)Value.o \
	$(D)ValKern.o \
	$(D)Client.o \
	$(D)Complex.o \
	$(D)Dict.o \
	$(D)Executable.o \
	$(D)LocalExec.o \
	$(D)Object.o \
	$(D)Queue.o \
	$(D)Reporter.o \
	$(D)Socket.o \
	$(D)Str.o \
	$(D)Stream.o \
	$(D)VecRef.o \
	$(D)glishlib.o \
	$(D)system.o @ARCH_OBJ@

KEY_HEADERS = \
	$(SRC)/Expr.h $(SRC)/Func.h $(H)/GlishType.h $(SRC)/Garbage.h \
	$(H)/Object.h $(SRC)/Sequencer.h $(H)/Value.h $(SRC)/IValue.h \
	$(H)/glish.h


top = @top_srcdir@@top_off@
INCDIR_P = $(SRC)/../include
LIBDIR_P = $(top)/lib/$(ARCH)
BINDIR_P = $(top)/bin/$(ARCH)

prefix = @prefix@
exec_prefix = @exec_prefix@
INCDIR = @includedir@
LIBDIR = @libdir@
BINDIR = @bindir@

MKHIER = $(top)/config/mkhier

RCDIR = @RCDIR@
TK_LIB = @TK_LIB@ 
XLIB = @XLIBSW@
XINC = @XINCLUDES@

INCLUDE = -I.. -I$(SRC) -I$(SRC)/include -I$(INCDIR_P) @TK_INCL@ $(XINC) $(PLUSINC)
CINCLUDE = -I.. -I$(SRC) -I$(SRC)/include -I$(INCDIR_P) @TK_INCL@ $(XINC)

GLIBS = $(LIBDIR_P)/libsos$(LIB_SUFFIX) $(LIBDIR_P)/libedit$(LIB_SUFFIX) @NPD_LIB@ $(TK_LIB)

TAR_FILE = glish.tar

all: $(LIBTGT) $(BINTGT)

install: $(INSTALL_LIBTGT) $(INSTALL_BINTGT)

lib_tgt: $(LIBDIR_P)/libglish$(LIB_SUFFIX) $(LIBDIR_P)/libglishp$(LIB_SUFFIX) 
	$(MKHIER) $(INCDIR_P)/Glish
	@rm -f $(INCDIR_P)/Glish/*.h
	cp $(H)/*.h $(INCDIR_P)/Glish

bin_tgt: $(BINDIR_P)/glish

INSTALL_lib_tgt: $(LIBDIR)/libglish$(LIB_SUFFIX) $(LIBDIR)/libglishp$(LIB_SUFFIX) 
	$(MKHIER) $(INCDIR)/Glish
	@rm -f $(INCDIR)/Glish/*.h
	cp $(H)/*.h $(INCDIR)/Glish

INSTALL_bin_tgt: $(BINDIR)/glish

glish: main.o $(LIBDIR_P)/libglish$(LIB_SUFFIX) $(LIBDIR_P)/libglishp$(LIB_SUFFIX) $(GLIBS)
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -o glish main.o $(GLISH_LIBS) $(XLIB) @LIBS@

libglish$(LIB_SUFFIX): $(CLIENT_OBJS_PROXY)
	rm -f libglish$(LIB_SUFFIX)
	$(MK_LIB) libglish$(LIB_SUFFIX) $(CLIENT_OBJS) $(LD_LIBS)
	$(RANLIB) libglish$(LIB_SUFFIX)
	$(MINSPACE_RM) $(CLIENT_OBJS)

libglishp$(LIB_SUFFIX): $(INTERP_OBJS_PROXY)
	rm -f libglishp$(LIB_SUFFIX)
	$(MK_LIB) libglishp$(LIB_SUFFIX) $(INTERP_OBJS) $(LD_LIBS)
	$(RANLIB) libglishp$(LIB_SUFFIX)
	$(MINSPACE_RM) $(INTERP_OBJS)

$(BINDIR_P)/glish: glish
	$(MKHIER) $(BINDIR_P)
	$(INSTALL_PROGRAM) -s glish $(BINDIR_P)

$(LIBDIR_P)/libglish$(LIB_SUFFIX): libglish$(LIB_SUFFIX)
	$(MKHIER) $(LIBDIR_P)
	$(INSTALL_LIBRARY) libglish$(LIB_SUFFIX) $(LIBDIR_P)
	$(RANLIB) $(LIBDIR_P)/libglish$(LIB_SUFFIX)

$(LIBDIR_P)/libglishp$(LIB_SUFFIX): libglishp$(LIB_SUFFIX)
	$(MKHIER) $(LIBDIR_P)
	$(INSTALL_LIBRARY) libglishp$(LIB_SUFFIX) $(LIBDIR_P)
	$(RANLIB) $(LIBDIR_P)/libglishp$(LIB_SUFFIX)

$(BINDIR)/glish: glish
	$(MKHIER) $(BINDIR)
	$(INSTALL_PROGRAM) -s glish $(BINDIR)

$(LIBDIR)/libglish$(LIB_SUFFIX): libglish$(LIB_SUFFIX)
	$(MKHIER) $(LIBDIR)
	$(INSTALL_LIBRARY) libglish$(LIB_SUFFIX) $(LIBDIR)
	$(RANLIB) $(LIBDIR)/libglish$(LIB_SUFFIX)

$(LIBDIR)/libglishp$(LIB_SUFFIX): libglishp$(LIB_SUFFIX)
	$(MKHIER) $(LIBDIR)
	$(INSTALL_LIBRARY) libglishp$(LIB_SUFFIX) $(LIBDIR)
	$(RANLIB) $(LIBDIR)/libglishp$(LIB_SUFFIX)

tar:
	@rm -f $(TAR_FILE).Z tar-files
	@$(MAKE) $(MFLAGS) tar-list >tar-files
	tar cf $(TAR_FILE) -I tar-files
	compress $(TAR_FILE)
	@rm tar-files

tar-list:
	@echo glish >&2
	@ls Makefile.in config.h.in \
		COPYING glish.init mkinit.sh *.c *.cc *.h *.l *.y \
		*.sed doc/*.ps demos/*.g demos/*.cc demos/*.c \
		demos/README* include/Glish/*.h | grep -v '^config.h$$'
	@cd clients; $(MAKE) $(MFLAGS) tar-list | sed 's,^,clients/,'

rcsinfo:
	@echo glish
	@rlog -L -S RCS/*,v
	@echo glish/include/Glish
	@cd include/Glish; rlog -L -S RCS/*,v
	@cd clients; $(MAKE) $(MFLAGS) rcsinfo

clean:
	@rm -f $(CLIENT_OBJS) $(CLIENT_OBJS_PROXY) $(INTERP_OBJS) $(INTERP_OBJS_PROXY) \
			libglishp$(LIB_SUFFIX) libglish$(LIB_SUFFIX) main.o glish errs \
			parse.cc y.tab.h glish_init.cc scan.cc ../$(TAR_FILE).Z

distclean: clean
	rm -f config.status config.cache config.h config_p.h Makefile

$(D)Agent.o: $(SRC)/Agent.cc $(KEY_HEADERS) $(SRC)/Stmt.h $(SRC)/Reporter.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Agent.cc $(T)

$(D)BinOpExpr.o: $(SRC)/BinOpExpr.cc $(SRC)/BinOpExpr.h $(KEY_HEADERS)
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/BinOpExpr.cc $(T)

$(D)BuiltIn.o: $(SRC)/BuiltIn.cc $(SRC)/BuiltIn.h $(SRC)/TkAgent.h $(KEY_HEADERS)
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/BuiltIn.cc $(T)

$(D)Client.o: $(SRC)/Client.cc $(H)/Client.h $(H)/Value.h $(H)/Object.h \
		$(SRC)/Reporter.h $(SRC)/ports.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Client.cc $(T)

$(D)Complex.o: $(SRC)/Complex.cc $(H)/Complex.h $(H)/glish.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Complex.cc $(T)

$(D)Daemon.o: $(SRC)/Daemon.cc $(SRC)/Daemon.h $(H)/Client.h
	$(CPLUS) '-DRSH="@RSH@"' $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Daemon.cc $(T)

$(D)Dict.o: $(SRC)/Dict.cc $(H)/Dict.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Dict.cc $(T)

$(D)Event.o: $(SRC)/Event.cc $(KEY_HEADERS) $(SRC)/Event.h $(SRC)/Reporter.h \
		$(SRC)/Task.h $(SRC)/Agent.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Event.cc $(T)

$(D)Executable.o: $(SRC)/Executable.cc $(SRC)/Executable.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Executable.cc $(T)

$(D)Expr.o: $(SRC)/Expr.cc $(KEY_HEADERS) $(SRC)/Reporter.h $(SRC)/Task.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Expr.cc $(T)

$(D)Frame.o: $(SRC)/Frame.cc $(SRC)/Frame.h $(H)/Object.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Frame.cc $(T)

$(D)Func.o: $(SRC)/Func.cc $(SRC)/Func.h $(SRC)/Stmt.h $(KEY_HEADERS)
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Func.cc $(T)

$(D)Garbage.o: $(SRC)/Garbage.cc $(SRC)/Garbage.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Garbage.cc $(T)

$(D)Pager.o: $(SRC)/Pager.cc $(SRC)/Pager.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Pager.cc $(T)

$(D)LocalExec.o: $(SRC)/LocalExec.cc $(SRC)/LocalExec.h $(SRC)/Executable.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/LocalExec.cc $(T)

$(D)Object.o: $(SRC)/Object.cc $(H)/Object.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Object.cc $(T)

$(D)Queue.o: $(SRC)/Queue.cc $(SRC)/Queue.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Queue.cc $(T)

$(D)RemoteExec.o: $(SRC)/RemoteExec.cc $(SRC)/RemoteExec.h $(SRC)/Executable.h \
		$(SRC)/Channel.h $(H)/Client.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/RemoteExec.cc $(T)

$(D)Reporter.o: $(SRC)/Reporter.cc $(SRC)/Reporter.h $(H)/Object.h $(SRC)/input.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Reporter.cc $(T)

$(D)Select.o: $(SRC)/Select.cc $(SRC)/Select.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Select.cc $(T)

$(D)Sequencer.o: $(SRC)/Sequencer.cc $(SRC)/Sequencer.h $(KEY_HEADERS) \
    $(SRC)/Task.h $(SRC)/Stmt.h $(SRC)/Channel.h $(SRC)/Queue.h \
    $(SRC)/Frame.h $(SRC)/ports.h $(SRC)/version.h $(H)/Client.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -DRCDIR=\"$(RCDIR)\" \
				-c $(SRC)/Sequencer.cc $(T)

$(D)Socket.o: $(SRC)/Socket.cc $(SRC)/Socket.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Socket.cc $(T)

$(D)Str.o: $(SRC)/Str.cc $(H)/Str.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Str.cc $(T)

$(D)Stream.o: $(SRC)/Stream.cc $(H)/Stream.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Stream.cc $(T)

$(D)Stmt.o: $(SRC)/Stmt.cc $(SRC)/Stmt.h $(KEY_HEADERS)
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Stmt.cc $(T)

$(D)Task.o:	$(SRC)/Task.cc $(SRC)/Task.h $(KEY_HEADERS) $(SRC)/Channel.h \
    $(SRC)/BuiltIn.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Task.cc $(T)

$(D)TkAgent.o: $(SRC)/Agent.h $(SRC)/TkAgent.cc $(SRC)/TkAgent.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -w -c $(SRC)/TkAgent.cc $(T)

$(D)TkCanvas.o: $(SRC)/Agent.h $(SRC)/TkAgent.h $(SRC)/TkCanvas.cc $(SRC)/TkCanvas.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/TkCanvas.cc $(T)

$(D)TkSelect.o: $(SRC)/Select.h $(SRC)/TkSelect.cc $(SRC)/TkSelect.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/TkSelect.cc $(T)

$(D)ValKern.o: $(SRC)/ValKern.cc $(H)/ValKern.h $(H)/glish.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/ValKern.cc $(T)

$(D)Value.o: $(SRC)/Value.cc $(H)/Value.h $(H)/Object.h $(H)/glish.h $(H)/ValKern.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/Value.cc $(T)

$(D)IValue.o: $(SRC)/Value.cc $(H)/Value.h $(SRC)/IValue.cc $(SRC)/IValue.h \
				 $(SRC)/Expr.h $(SRC)/BinOpExpr.h \
			 $(H)/Object.h $(H)/glish.h $(H)/ValKern.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/IValue.cc $(T)

$(D)VecRef.o: $(SRC)/VecRef.cc $(H)/VecRef.h $(H)/Value.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/VecRef.cc $(T)

$(D)glishlib.o: $(SRC)/glishlib.cc $(SRC)/glishlib.h $(H)/Value.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/glishlib.cc $(T)

main.o: $(SRC)/main.cc $(SRC)/Sequencer.h $(SRC)/input.h $(SRC)/IValue.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/main.cc

y.tab.h $(D)parse.o: $(SRC)/parse.y

parse.cc: $(SRC)/parse.y
	$(YACC) -d $(SRC)/parse.y
	mv -f y.tab.c parse.cc
	sed -e 's/extern "C" int yylex(void);//' < parse.cc > parse.cc.fixed
	mv parse.cc.fixed parse.cc
# the sgi compiler puts in a declaration of yylex which screws things up
# Hence this kludge. gcc for one doesn't redeclare yylex so this does
# nothing.

$(D)parse.o: parse.cc $(KEY_HEADERS) $(SRC)/Stmt.h $(SRC)/BinOpExpr.h
	@sed -f $(SRC)/fix_yyparse.sed < parse.cc > parse.cc.fixed
	@mv parse.cc.fixed parse.cc
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -I. -DYYDEBUG -c parse.cc $(T)


$(D)scan.o: $(SRC)/scan.l y.tab.h $(KEY_HEADERS)
	@rm -f scan.cc
	flex $(LFLAGS) $(SRC)/scan.l
	@mv lex.yy.c scan.cc
	@-chmod g+w scan.cc
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -I. -c scan.cc $(T)

glish_init.cc: $(SRC)/glish.init $(SRC)/mkinit.sh
	$(SH) $(SRC)/mkinit.sh $(SRC)/glish.init >glish_init.cc

$(D)glish_init.o: glish_init.cc
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c glish_init.cc $(T)

$(D)system.o: $(SRC)/system.c $(SRC)/system.h
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(SRC)/system.c $(T)

alpha.o: $(SRC)/alpha.c
	$(ALTCC) $(CINCLUDE) $(CFLAGS) -c $(SRC)/alpha.c

INSTALL_:

