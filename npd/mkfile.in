## $Id$
##
## Makefile for npd C libraries.
##

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

#IF DYNAMIC
MK_LIB = @MAKE_SLIB@
LD_LIBS = @SLIB_LD_LIBS@
CFLAGS = @CFLAGS@ @SLIB_CFLAGS@
LIB_SUFFIX = @GLISH_SLIB_SUFFIX@
RANLIB = :
LIBTGT = @DYNAMIC_LIB@
BINTGT = 
INSTALL_LIBTGT = INSTALL_@DYNAMIC_LIB@
INSTALL_BINTGT = 
INSTALL_LIBRARY = $(INSTALL_PROGRAM)
#ELSE
MK_LIB = @MAKE_LIB@
LD_LIBS = 
CFLAGS = @CFLAGS@
LIB_SUFFIX = @GLISH_LIB_SUFFIX@
RANLIB = @RANLIB@
LIBTGT = lib_tgt
BINTGT = bin_tgt
INSTALL_LIBTGT = INSTALL_@STATIC_LIB@
INSTALL_BINTGT = INSTALL_bin_tgt
INSTALL_LIBRARY = $(INSTALL_DATA)
#FI

CC = @CC@
LIBS = @LIBS@

D = @DOT@
T = @TOUCH_PROXY@
MINSPACE_RM = @MINSPACE_RM@

SHELL = /bin/sh

RM = rm -f

SRC = ../..
HEADERDIR = $(SRC)/include/Npd
INC = -I.. -I$(SRC)/include -I/usr/ucbinclude

top = @top_srcdir@@top_off@
INCDIR_P = $(top)/include
LIBDIR_P = $(top)/lib/$(ARCH)
BINDIR_P = $(top)/bin/$(ARCH)

prefix = @prefix@
exec_prefix = @exec_prefix@
INCDIR = @includedir@
LIBDIR = @libdir@
BINDIR = @bindir@

MKHIER = $(top)/config/mkhier

KEYDIR = @KEYDIR@

##LOGDIR = /net/kochab/kochab_3/dschieb/glish/glish/log

OBJS = \
	auth.o \
	md5c.o \
	npd.o \
	util.o

OBJS_PROXY = \
	$(D)auth.o \
	$(D)md5c.o \
	$(D)npd.o \
	$(D)util.o

TAR_FILE = npd.tar

all: $(LIBTGT) $(BINTGT)

install: $(INSTALL_LIBTGT) $(INSTALL_BINTGT)

lib_tgt: $(LIBDIR_P)/libnpd$(LIB_SUFFIX) $(INCDIR_P)/Npd/npd.h

bin_tgt: $(BINDIR_P)/glishkey

INSTALL_lib_tgt: $(LIBDIR)/libnpd$(LIB_SUFFIX)
	if test ! -d $(KEYDIR)/hosts; then	\
	    $(MKHIER) "$(KEYDIR)/hosts";	\
	    chmod -f 750 "$(KEYDIR)/hosts";	\
	fi
	if test ! -d $(KEYDIR)/users; then	\
	    $(MKHIER) "$(KEYDIR)/users";	\
	    chmod -f 770 "$(KEYDIR)/users";	\
	fi
	$(MKHIER) $(INCDIR)/Npd
	@rm -f $(INCDIR)/Npd/*.h
	cp $(HEADERDIR)/npd.h $(INCDIR)/Npd

INSTALL_bin_tgt: $(BINDIR)/glishkey

libnpd$(LIB_SUFFIX): $(OBJS_PROXY)
	$(RM) libnpd$(LIB_SUFFIX)
	$(MK_LIB) libnpd$(LIB_SUFFIX) $(OBJS) $(LD_LIBS)
	$(RANLIB) libnpd$(LIB_SUFFIX)
	$(MINSPACE_RM) $(OBJS)

glishkey: libnpd$(LIB_SUFFIX) genkey.o
	$(CC) $(INC) $(CFLAGS) -o glishkey genkey.o libnpd$(LIB_SUFFIX) -lm @LIBS@

$(LIBDIR_P)/libnpd$(LIB_SUFFIX):libnpd$(LIB_SUFFIX)
	$(MKHIER) $(LIBDIR_P)
	$(MKHIER) $(INCDIR_P)/Npd
	$(INSTALL_LIBRARY) libnpd$(LIB_SUFFIX) $(LIBDIR_P)
	$(RANLIB) $(LIBDIR_P)/libnpd$(LIB_SUFFIX)

$(BINDIR_P)/glishkey:glishkey
	$(MKHIER) $(BINDIR_P)
	$(INSTALL_PROGRAM) -s glishkey $(BINDIR_P)

$(LIBDIR)/libnpd$(LIB_SUFFIX):libnpd$(LIB_SUFFIX)
	$(MKHIER) $(LIBDIR)
	$(INSTALL_LIBRARY) libnpd$(LIB_SUFFIX) $(LIBDIR)
	$(RANLIB) $(LIBDIR)/libnpd$(LIB_SUFFIX)

$(BINDIR)/glishkey:glishkey
	$(MKHIER) $(BINDIR)
	$(INSTALL_PROGRAM) -s glishkey $(BINDIR)

tar:
	@rm -f $(TAR_FILE).Z tar-files
	@$(MAKE) $(MFLAGS) tar-list >tar-files
	tar cf $(TAR_FILE) -I tar-files
	compress $(TAR_FILE)
	@rm -f tar-files

tar-list:
	@echo npd >&2
	@ls Makefile.in *.c include/Npd/*.h

rcsinfo:
	@echo sds
	@rlog -L RCS/*,v | sed -n -e 's/Working file://p' -e 's/locked by//p'
	@echo sds/include/Sds
	@cd include/Sds;rlog -L RCS/*,v | sed -n -e 's/Working file://p' -e 's/locked by//p'

clean:
	@rm -f errs $(OBJS_PROXY) *.o *~* $(APPS) core a.out *.a *.so ../$(TAR_FILE).Z

distclean: clean
	rm -f config.status config.cache config.h Makefile

$(D)auth.o: $(SRC)/auth.c $(SRC)/md5.h $(SRC)/util.h $(SRC)/auth.h
	$(CC) $(INC) $(CFLAGS) -c $(SRC)/auth.c	$(T)

$(D)npd.o: $(SRC)/npd.c $(SRC)/version.h $(SRC)/auth.h $(SRC)/util.h
	$(CC) $(INC) $(CFLAGS) -DKEYS_DIR=\"$(KEYDIR)\" -c $(SRC)/npd.c	$(T)

$(D)md5c.o: $(SRC)/md5c.c $(SRC)/md5.h
	$(CC) $(INC) $(CFLAGS) -c $(SRC)/md5c.c $(T)

$(D)util.o: $(SRC)/util.c $(SRC)/util.h
	$(CC) $(INC) $(CFLAGS) -c $(SRC)/util.c $(T)
#	$(CC) $(INC) $(CFLAGS) -DLOG_FMT=\"$(LOGDIR)/%s.%s@%s.log\" -c $(SRC)/util.c

$(INCDIR_P)/Npd/npd.h: $(HEADERDIR)/npd.h
	rm -f $@ 
	cp $(HEADERDIR)/npd.h $@

genkey.o: $(SRC)/genkey.c $(SRC)/util.h
	$(CC) $(INC) $(CFLAGS) -c $(SRC)/genkey.c

INSTALL_:
