This is Glish version 2.6.0, dated 14Nov97.
------------------------------------------------------------------------

Installing Glish
----------------

The Glish system comes in four directories, "sds", "editline", "glish",
and "rivet".  The first three are found in the glish-2.6.?.tar.gz
archive, and the last is found in rivet-2.6.?.tar.gz.  This last
one is optional. It includes the base set of Tk widgets and makes them
available from Glish. While this is quite handy, it makes the Glish
interpreter larger. You can decide if you want these widgets or not.
If you do, unpack both of the files, and if not, just unpack the first.

To build the system you need a C++ compiler, sockets, an ANSI C compiler,
and flex 2.4.6 (or higher); you can get the latest version of flex from
ftp.ee.lbl.gov.


Single User Install
-------------------

In general, to compile Glish, all you should have to do is:

	1.  cd glish

	2.  ./configure

	3.  make

This will install a local version which will allow you to experiment
with Glish. The binaries will be in "bin/<HOSTNAME>" where <HOSTNAME>
is the name of the host on which you just did the compilation. You
can compile on multiple hosts from the same directory, and you can have
multiple compiles going at the same time.


Multi User Install
------------------

If you want to install Glish so that it is available for many users,
you must set the '--prefix=...' flag. In this case, you would do
something like:

	1.  cd glish

	2.  ./configure --prefix=/usr/local/glish

	3.  make

	4.  make install

You should check to make sure the compile went OK between steps (3)
and (4), and you should make sure you have permission to write to the
directory specified after "--prefix=" before doing step (4).


Other Configure Flags
---------------------

There are some other things you can specify to configure:

	--rc-dir=<DIR>  allows you to specify the directory where the
		site wide .glishrc startup file will be located

	--key-dir=<DIR>  allows you to specify where the user and host
		key files will be located. You only need to worry about
		this if you plan to start "glishd" as root (see chapter
		14 of the user manual).

	--enable-dynamic  this specifies that shared libraries should be
		built for Glish. This may not work on all OSes, but should
		work on most.

	--enable-static-binary  this specifies that even if shared libraries
		are being built, the binaries should be linked statically.
		This is only of use if '--enable-dynamic' is used.

	--enable-min-space  this specifies that intermediate object files
		should be deleted as libraries are built. This should only
		be used if you are likely to run short of disk space because
		it could make future compiles fail if you make changes to
		source code and recompile.


Environment Variables
---------------------

There are a few environment variables which can be set to control the
configuration of Glish.

	$ARCH  if this is set, the value of this variable will be used as
		the name of the current OS architecture instead of the name
		that 'configure' selects.

	$CC and $CXX  allow you to force a particular C and C++ (resp.)
		compiler to be used to build Glish.

	$YACC  this allows you to force a particular YACC compatible
		parser generator to be used, e.g. yacc, bison, etc.


Problems
--------

If you have a problem building Glish, please report it so that it can be
resolved and so that other users can avoid the same problems.  Here are
some problems we've experienced in the past:

	alloca and YACC  --  there can be a bad interaction on some systems
		between the native compiler and bison. These show up in
		complaints about alloca. If you should have this problem,
		the easiest thing to do is set the YACC environment variable
		to "yacc" and redo the configure and make.

		You will probably also have to remove the object files which
		were built earlier, e.g. :

			rm -rf glish/<ARCH>

		where <ARCH> is the architecture name of the current OS.

------------------------------------------------------------------------
$Id$
